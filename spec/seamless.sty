\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{seamless}[2015/01/05 seamless package]

% for requirements traceability
% thanks to @jfbu (tex.stackexchange.com) for the answer
% (http://tex.stackexchange.com/questions/220561/automate-generation-of-table-from-data-in-enumerated-lists)
\RequirePackage{enumitem}
\RequirePackage{xinttools}
\RequirePackage{hyperref}

\hypersetup{colorlinks=true}

\newenvironment{enumspec} {
  \begin{enumerate}[series=spec,resume=spec,label=\textbf{S\arabic*}]%
{}
}{%
\end{enumerate}%
}

\newcommand{\requirements}{}
\providecommand*\phantomsection{}

\newcommand{\req}[1]{%
  \textbf{R#1}%
    \phantomsection
    \def\@currentlabel{R#1}%
    \label{req@#1}%
    \g@addto@macro\requirements{{req@#1}}%
    \global\@namedef{req@#1@ismetby}{}%
}

\newcommand{\meetsthisreq}[1]{% renamed from previous \meetsreq
  \ref{req@#1}%
    \expandafter\g@addto@macro\csname req@#1@ismetby\expandafter\endcsname 
    \expandafter {\expandafter{\@currentspec}}%
}

\newcommand{\meetsreq}[1]{% (handles comma separated list)
  \xintListWithSep{, }{\xintApply{ \meetsthisreq}{\xintCSVtoList{#1}}}%
}

\newcommand{\specswithreq}[1]%
% The space before \ref below is intentional and will be swallowed by \xintApply
% It is not mandatory however, the thing works without it too.
{\xintListWithSep{, }{\xintApply { \ref}{\csname #1@ismetby\endcsname }}}

\newcommand{\spec}[1]{\label{spec@#1}\gdef\@currentspec{spec@#1}}
% (update Jan 5, to use \gdef rather than \def in \spec, allowing more 
% flexible usage; has its pros and cons)

% example environment
\newenvironment{example}{
\begin{quote}
{\it Example}.
}{
\end{quote}
}

% source environment 
\newenvironment{chapelsource}[1]{
\begin{quote}
{\it Source (#1)}.
}{
\end{quote}
}

% helper environment
\newenvironment{chapelhelper}[1]{
\begin{quote}
{\it Helper (#1)}.
}{
\end{quote}
}

% example (test) environment
\newenvironment{chapelexample}[1]{
\begin{quote}
{\it Test (#1)}.
}{
\end{quote}
}

% environments to produce various colorful-boxed notes
\usepackage[framemethod=TikZ]{mdframed}

\mdfdefinestyle{seamlessnoteFrame}{%
  linecolor=cyan,
    outerlinewidth=1pt,
    roundcorner=4pt,
    innertopmargin=\baselineskip,
    innerbottommargin=\baselineskip,
    innerrightmargin=20pt,
    innerleftmargin=20pt,
    backgroundcolor=cyan!20!white}

\newenvironment{seamlessnote}{
\begin{mdframed}[style=seamlessnoteFrame]
 {\it \lstinline{seamless}}.
 }{
 \end{mdframed}
}

\mdfdefinestyle{futureFrame}{%
  linecolor=green,
    outerlinewidth=1pt,
    roundcorner=4pt,
    innertopmargin=\baselineskip,
    innerbottommargin=\baselineskip,
    innerrightmargin=20pt,
    innerleftmargin=20pt,
    backgroundcolor=green!20!white}

\newenvironment{future}{
\begin{mdframed}[style=futureFrame]
  {\it Future}.
 }{
 \end{mdframed}
}

\mdfdefinestyle{todoFrame}{%
  linecolor=gray,
    outerlinewidth=1pt,
    roundcorner=4pt,
    innertopmargin=\baselineskip,
    innerbottommargin=\baselineskip,
    innerrightmargin=20pt,
    innerleftmargin=20pt,
    backgroundcolor=gray!20!white}

\newenvironment{TODO}{
\begin{mdframed}[style=todoFrame]
  {\it TODO}.
 }{
 \end{mdframed}
}

\mdfdefinestyle{noteFrame}{%
  linecolor=orange,
    outerlinewidth=1pt,
    roundcorner=4pt,
    innertopmargin=\baselineskip,
    innerbottommargin=\baselineskip,
    innerrightmargin=20pt,
    innerleftmargin=20pt,
    backgroundcolor=orange!20!white}

\newenvironment{note}{
\begin{mdframed}[style=noteFrame]
  {\it Note}.
 }{
 \end{mdframed}
}

\mdfdefinestyle{rationaleFrame}{%
  linecolor=blue,
    outerlinewidth=1pt,
    roundcorner=4pt,
    innertopmargin=\baselineskip,
    innerbottommargin=\baselineskip,
    innerrightmargin=20pt,
    innerleftmargin=20pt,
    backgroundcolor=blue!20!white}

\newenvironment{rationale}{
\begin{mdframed}[style=rationaleFrame]
  {\it Rationale}.
 }{
 \end{mdframed}
}

\mdfdefinestyle{openissueFrame}{%
  linecolor=red,
    outerlinewidth=1pt,
    roundcorner=4pt,
    innertopmargin=\baselineskip,
    innerbottommargin=\baselineskip,
    innerrightmargin=20pt,
    innerleftmargin=20pt,
    backgroundcolor=red!20!white}

\newenvironment{openissue}{
\begin{mdframed}[style=openissueFrame]
  {\it Open issue}.
 }{
 \end{mdframed}
}

% These are special environments for adding extra information about
% code snippets which can be later extracted and used to generate test
% codes for automated testing.
%
% During LaTeX compilation, the environments defined in this file throw
% away all text within the scope of the environment, with the
% exception of 'chapelprintoutput' which prints the output (and is
% also extracted for testing purposes).
%
% Usage:
%
% - chapelexample (REQUIRED) {f.chpl}
%   This marks the start of a test.  This environment requires a
%   single argument that is the name of the Chapel test program.  This
%   filename will appear in the spec.
%
% - chapelpre
%   Any Chapel code in this scope is put *before* the code in the
%   chapel|chapelcode scope.
%
% - chapelcode|chapel
%   This is the part of the code that is in the spec.
%
% - chapelnoprint
%   This is the part of the code that goes in the test with chapelcode
%   and chapel, but does not appear in the spec.
%   
% - chapelpost
%   Any Chapel code in this scope is put *after* the code in the
%   chapel|chapelcode scope.
%
% - chapelfuture
% - chapelcompopts
% - chapelexecopts
%   The lines in these scopes are put directly into the appropriate file.
%
% - chapeloutput|chapelprintoutput (REQUIRED)
%   These environment provide the test output (.good files).  There can be
%   multiple such environments, and the filename is specified by a LaTeX
%   style comment preceeding the contents of the output.  The
%   'chapelprintoutput' scope is also outputted in the spec itself and
%   thus may contain LaTeX formatting (see GENERAL CAVEATS below)
%   
% - chapelwideoutput
%   Provides the test output for no-local tests, if that differs from the
%   normal test output.  The content of this environment is dumped into a
%   <test>.no-local.good file, along with a copy of the content of 
%   chplprintoutput.
%

%
% GENERAL CAVEATS:
%
% - Because the chapelprintoutput environment must used LaTeX
%   formatting, the script that extracts the tests must removed any
%   LaTeX specific formatting.
%
% - Using a backslash or other special LaTeX characters may also be
%   needed (e.g., \_ or \#) in the other environments for LaTex
%   parsing purposes.  Such characters are considered fragile and may
%   lead to unexpected results.
%

%
% Gobble up the text in this new box.  The text in each environment is
% dropped on the floor during LaTeX compilation.
%
\newsavebox{\teststuff}

%
% Any additional lines needed for the code snippet to run/compile
% (before and after the chapel code segment)
%
\newenvironment{chapelpre} {\begin{lrbox}{\teststuff}
\begin{minipage}{6in}}
{\end{minipage}\end{lrbox}}

\newenvironment{chapelnoprint} {\begin{lrbox}{\teststuff}
\begin{minipage}{6in}}
{\end{minipage}\end{lrbox}}

\newenvironment{chapelpost} {\begin{lrbox}{\teststuff}
\begin{minipage}{6in}}
{\end{minipage}\end{lrbox}}


%
% .future file
%
\newenvironment{chapelfuture} {\begin{lrbox}{\teststuff}
\begin{minipage}{6in}}
{\end{minipage}\end{lrbox}}

%
% .compopts file
%
\newenvironment{chapelcompopts} {\begin{lrbox}{\teststuff}
\begin{minipage}{6in}}
{\end{minipage}\end{lrbox}}

%
% .execopts file
%
\newenvironment{chapelexecopts} {\begin{lrbox}{\teststuff}
\begin{minipage}{6in}}
{\end{minipage}\end{lrbox}}


%
% .good file
% To get more than one file, use a LaTeX style comment to name the
% .good file
%
\newenvironment{chapeloutput} {\begin{lrbox}{\teststuff}
\begin{minipage}{6in}}
{\end{minipage}\end{lrbox}}

%
% .no-local.good file
% (The naming feature mentioned above does not yet work, so this
% environment is a Q&D way to get a .no-local.good file.)
%
\newenvironment{chapelwideoutput} {\begin{lrbox}{\teststuff}
\begin{minipage}{6in}}
{\end{minipage}\end{lrbox}}

%
% .prediff file
%
\newenvironment{chapelprediff} {\begin{lrbox}{\teststuff}
\begin{minipage}{6in}}
{\end{minipage}\end{lrbox}}

%
% .good file that is printed in the text of the Spec
% To get more than one file, use a LaTeX style comment to name the
% .good file
%
%\lstnewenvironment{chapelprintoutput} 
% (See chapel_listing.tex for the implementation.)

\endinput
